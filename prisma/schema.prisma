// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GOAL {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      STATUS   @default(INCOMPLETE)
}

enum STATUS {
  INCOMPLETE
  COMPLETE
}

model TASK {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      STATUS   @default(INCOMPLETE)
  imgUrl      String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Credentials {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updaptedAt DateTime  @updatedAt
  finances   Finance[]
}

model Finance {
  id               Int         @id @default(autoincrement())
  category         CATEGORY
  amount           Float
  date             DateTime    @default(now())
  credentialsEmail String
  credentials      Credentials @relation(fields: [credentialsEmail], references: [email])
}

enum CATEGORY {
  FOOD
  ENTERTAINMENT
  GIFT
  TRANSPORTATION
  UTILITIES
  HOUSING
  EDUCATION
  MISCELLANEOUS
  INCOME
  PROFIT
}
